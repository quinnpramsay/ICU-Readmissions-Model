# -*- coding: utf-8 -*-
"""ICU_Query.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KXvwSHr6A75AO72aR8TwhOF0V4iF3Oof
"""

from sklearn.linear_model import LogisticRegression # binary classification
from sklearn.model_selection import train_test_split # to train and test the model
from sklearn.preprocessing import StandardScaler # to scale everything to comparable values
from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score, roc_curve # Help test the model to see how good it is
from imblearn.over_sampling import SMOTE # to help with the 14% positives
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# Access data using Google BigQuery.
from google.colab import auth
from google.cloud import bigquery

auth.authenticate_user()

project_id='icu-readmissions-ai-project'
client = bigquery.Client(project=project_id)

# MIMIC-IV v3.1 dataset information
MIMIC_PROJECT = "physionet-data"
MIMIC_DATASET_HOSP = "mimiciv_3_1_hosp"
MIMIC_DATASET_ICU = "mimiciv_3_1_icu"

#query all data from dataset
query = f"""WITH icu_stays AS (
    SELECT
        icus.subject_id,
        icus.hadm_id,
        icus.stay_id,
        icus.intime,
        icus.outtime,
        icus.los as icu_los_days,
        icus.first_careunit,
        icus.last_careunit,
        LEAD(intime) OVER (PARTITION BY subject_id ORDER BY intime) as next_icu_intime,
        LEAD(stay_id) OVER (PARTITION BY subject_id ORDER BY intime) as next_stay_id
    FROM `{MIMIC_PROJECT}.{MIMIC_DATASET_ICU}.icustays` icus
),

demographics AS (
    SELECT
        subject_id,
        anchor_age as age,
        CASE WHEN gender = 'M' THEN 1 ELSE 0 END as is_male
    FROM `{MIMIC_PROJECT}.{MIMIC_DATASET_HOSP}.patients`
),

comorbidities AS (
    SELECT
        hadm_id,
        MAX(CASE WHEN icd_version = 9 THEN 1 ELSE 0 END) as has_icd9,
        COUNT(DISTINCT icd_code) as num_diagnoses
    FROM `{MIMIC_PROJECT}.{MIMIC_DATASET_HOSP}.diagnoses_icd`
    GROUP BY hadm_id
),

procedures AS (
    SELECT
        hadm_id,
        COUNT(*) as num_procedures
    FROM `{MIMIC_PROJECT}.{MIMIC_DATASET_HOSP}.procedures_icd`
    GROUP BY hadm_id
),

prior_icu AS (
    SELECT
        subject_id,
        stay_id,
        COUNT(*) OVER (PARTITION BY subject_id ORDER BY intime
                       ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING) as prior_icu_count
    FROM `{MIMIC_PROJECT}.{MIMIC_DATASET_ICU}.icustays`
)

SELECT
    icus.*,
    dem.age,
    dem.is_male,
    COALESCE(comorb.num_diagnoses, 0) as num_diagnoses,
    COALESCE(proc.num_procedures, 0) as num_procedures,
    COALESCE(prior.prior_icu_count, 0) as prior_icu_count,


    CASE
        WHEN DATETIME_DIFF(next_icu_intime, outtime, DAY) <= 30
        AND DATETIME_DIFF(next_icu_intime, outtime, DAY) >= 0
        THEN 1
        ELSE 0
    END as readmitted_30day

FROM icu_stays icus
LEFT JOIN demographics dem ON icus.subject_id = dem.subject_id
LEFT JOIN comorbidities comorb ON icus.hadm_id = comorb.hadm_id
LEFT JOIN procedures proc ON icus.hadm_id = proc.hadm_id
LEFT JOIN prior_icu prior ON icus.stay_id = prior.stay_id
ORDER BY icus.subject_id, icus.intime
"""

df_readmissions = client.query(query).to_dataframe()